%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                              %
% SU2 configuration file                                                       %
% Case description: Turbulent flow past the ONERA M6 wing                      %
% Author: Thomas D. Economon                                                   %
% Institution: Stanford University                                             %
% Date: 2014.06.14                                                             %
% File Version 5.0.0 "Raven"                                                %
%                                                                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% ------------- DIRECT, ADJOINT, AND LINEARIZED PROBLEM DEFINITION ------------%
%
% Physical governing equations (EULER, NAVIER_STOKES,
%                               WAVE_EQUATION, HEAT_EQUATION, FEM_ELASTICITY,
%                               POISSON_EQUATION)          
SOLVER= RANS
%
% Specify turbulence model (NONE, SA, SA_NEG, SST)
KIND_TURB_MODEL= SA
%
% Mathematical problem (DIRECT, CONTINUOUS_ADJOINT)
MATH_PROBLEM= DISCRETE_ADJOINT
%
% Restart solution (NO, YES)
RESTART_SOL= NO

% ------------------------ ONE SHOT OPTIONS -----------------------------------%
%
ONE_SHOT= NONE

% -------------------- COMPRESSIBLE FREE-STREAM DEFINITION --------------------%
%
% Mach number (non-dimensional, based on the free-stream values)
MACH_NUMBER= 0.8395
%
% Angle of attack (degrees, only for compressible flows)
AOA= 3.06
%
% Side-slip angle (degrees, only for compressible flows)
SIDESLIP_ANGLE= 0.0
%
% Init option to choose between Reynolds (default) or thermodynamics quantities
% for initializing the solution (REYNOLDS, TD_CONDITIONS)
INIT_OPTION= REYNOLDS
%
% Free-stream option to choose between density and temperature (default) for
% initializing the solution (TEMPERATURE_FS, DENSITY_FS)
FREESTREAM_OPTION= TEMPERATURE_FS
%
% Free-stream temperature (288.15 K by default)
FREESTREAM_TEMPERATURE= 288.15
%
% Reynolds number (non-dimensional, based on the free-stream values)
REYNOLDS_NUMBER= 11.72E6
%
% Reynolds length (1 m by default)
REYNOLDS_LENGTH= 0.64607

% ---- IDEAL GAS, POLYTROPIC, VAN DER WAALS AND PENG ROBINSON CONSTANTS -------%
%
% Different gas model (STANDARD_AIR, IDEAL_GAS, VW_GAS, PR_GAS)
FLUID_MODEL= STANDARD_AIR
%
% Ratio of specific heats (1.4 default and the value is hardcoded
%                          for the model STANDARD_AIR)
GAMMA_VALUE= 1.4
%
% Specific gas constant (287.058 J/kg*K default and this value is hardcoded 
%                        for the model STANDARD_AIR)
GAS_CONSTANT= 287.058

% --------------------------- VISCOSITY MODEL ---------------------------------%
%
% Viscosity model (SUTHERLAND, CONSTANT_VISCOSITY).
VISCOSITY_MODEL= SUTHERLAND
%
% Sutherland Viscosity Ref (1.716E-5 default value for AIR SI)
MU_REF= 1.716E-5
%
% Sutherland Temperature Ref (273.15 K default value for AIR SI)
MU_T_REF= 273.15
%
% Sutherland constant (110.4 default value for AIR SI)
SUTHERLAND_CONSTANT= 110.4

% --------------------------- THERMAL CONDUCTIVITY MODEL ----------------------%
%
% Conductivity model (CONSTANT_CONDUCTIVITY, CONSTANT_PRANDTL).
CONDUCTIVITY_MODEL= CONSTANT_PRANDTL
%
% Laminar Prandtl number (0.72 (air), only for CONSTANT_PRANDTL)
PRANDTL_LAM= 0.72
%
% Turbulent Prandtl number (0.9 (air), only for CONSTANT_PRANDTL)
PRANDTL_TURB= 0.90

% ---------------------- REFERENCE VALUE DEFINITION ---------------------------%
%
% Reference origin for moment computation
REF_ORIGIN_MOMENT_X = 0.25
REF_ORIGIN_MOMENT_Y = 0.00
REF_ORIGIN_MOMENT_Z = 0.00
%
% Reference length for pitching, rolling, and yawing non-dimensional moment
REF_LENGTH= 0.64607
%
% Reference area for force coefficients (0 implies automatic calculation)
REF_AREA= 0
%
% Compressible flow non-dimensionalization (DIMENSIONAL, FREESTREAM_PRESS_EQ_ONE,
%                              FREESTREAM_VEL_EQ_MACH, FREESTREAM_VEL_EQ_ONE)
REF_DIMENSIONALIZATION= FREESTREAM_VEL_EQ_ONE

% -------------------- BOUNDARY CONDITION DEFINITION --------------------------%
%
% Navier-Stokes wall boundary marker(s) (NONE = no marker)
MARKER_HEATFLUX= ( WING, 0.0 )
%
% Far-field boundary marker(s) (NONE = no marker)
MARKER_FAR= ( FARFIELD )
%
% Symmetry boundary marker(s) (NONE = no marker)
MARKER_SYM= ( SYMMETRY )
%
% Marker(s) of the surface to be plotted or designed
MARKER_PLOTTING= ( WING )
%
% Marker(s) of the surface where the functional (Cd, Cl, etc.) will be evaluated
MARKER_MONITORING= ( WING )

% ------------- COMMON PARAMETERS DEFINING THE NUMERICAL METHOD ---------------%
%
% Numerical method for spatial gradients (GREEN_GAUSS, WEIGHTED_LEAST_SQUARES)
NUM_METHOD_GRAD= GREEN_GAUSS
%
% Courant-Friedrichs-Lewy condition of the finest grid
CFL_NUMBER= 100.0
%
% Adaptive CFL number (NO, YES)
CFL_ADAPT= NO
%
% Parameters of the adaptive CFL number (factor down, factor up, CFL min value,
%                                        CFL max value )
CFL_ADAPT_PARAM= ( 1.5, 0.5, 25.0, 100000.0 )
%
% Runge-Kutta alpha coefficients
RK_ALPHA_COEFF= ( 0.66667, 0.66667, 1.000000 )
%
% Number of total iterations
ITER= 100
%
% Objective function in gradient evaluation   (DRAG, LIFT, SIDEFORCE, MOMENT_X,
%                                             MOMENT_Y, MOMENT_Z, EFFICIENCY,
%                                             EQUIVALENT_AREA, NEARFIELD_PRESSURE,
%                                             FORCE_X, FORCE_Y, FORCE_Z, THRUST,
%                                             TORQUE, TOTAL_HEATFLUX,
%                                             MAXIMUM_HEATFLUX, INVERSE_DESIGN_PRESSURE,
%                                             INVERSE_DESIGN_HEATFLUX, SURFACE_TOTAL_PRESSURE,
%                                             SURFACE_MASSFLOW, SURFACE_STATIC_PRESSURE, SURFACE_MACH)
% For a weighted sum of objectives: separate by commas, add OBJECTIVE_WEIGHT and MARKER_MONITORING in matching order.
OBJECTIVE_FUNCTION= DRAG
%
SMOOTH_GRADIENT = NO
%
SMOOTHING_PARAM = 0.25
%
SMOOTHING_PARAM_SECOND = 1.0
%
%SEPARATE_DIMENSIONS = NO
%
SECOND_ORDER_INTEGRATION = YES
%
SMOOTH_ON_SURFACE=YES
%
%DIRICHLET_SURFACE_BOUNDARY=YES
%
SOBOLEV_MODE=PARAM_LEVEL_COMPLETE

% ------------------------ LINEAR SOLVER DEFINITION ---------------------------%
%
% Linear solver for the implicit (or discrete adjoint) formulation (BCGSTAB, FGMRES)
LINEAR_SOLVER= FGMRES
%
% Preconditioner of the Krylov linear solver (NONE, JACOBI, LINELET)
LINEAR_SOLVER_PREC= ILU
%
% Min error of the linear solver for the implicit formulation
LINEAR_SOLVER_ERROR= 1E-10
%
% Max number of iterations of the linear solver for the implicit formulation
LINEAR_SOLVER_ITER= 10

% -------------------------- MULTIGRID PARAMETERS -----------------------------%
%
% Multi-Grid Levels (0 = no multi-grid)
MGLEVEL= 0
%
% Multi-grid cycle (V_CYCLE, W_CYCLE, FULLMG_CYCLE)
MGCYCLE= V_CYCLE
%
% Multi-grid pre-smoothing level
MG_PRE_SMOOTH= ( 1, 1, 1, 1 )
%
% Multi-grid post-smoothing level
MG_POST_SMOOTH= ( 0, 0, 0, 0 )
%
% Jacobi implicit smoothing of the correction
MG_CORRECTION_SMOOTH= ( 0, 0, 0, 0 )
%
% Damping factor for the residual restriction
MG_DAMP_RESTRICTION= 0.7
%
% Damping factor for the correction prolongation
MG_DAMP_PROLONGATION= 0.7

% -------------------- FLOW NUMERICAL METHOD DEFINITION -----------------------%
%
% Convective numerical method (JST, LAX-FRIEDRICH, CUSP, ROE, AUSM, HLLC,
%                              TURKEL_PREC, MSW)
CONV_NUM_METHOD_FLOW= JST
%
% Spatial numerical order integration (1ST_ORDER, 2ND_ORDER, 2ND_ORDER_LIMITER)
MUSCL_FLOW= YES
%
% Slope limiter (NONE, VENKATAKRISHNAN, VENKATAKRISHNAN_WANG,
%                BARTH_JESPERSEN, VAN_ALBADA_EDGE)
SLOPE_LIMITER_FLOW= VENKATAKRISHNAN
%
% Coefficient for the Venkat's limiter (upwind scheme). A larger values decrease
%             the extent of limiting, values approaching zero cause
%             lower-order approximation to the solution (0.05 by default)
VENKAT_LIMITER_COEFF= 0.05
%
% 2nd and 4th order artificial dissipation coefficients for
%     the JST method ( 0.5, 0.02 by default )
JST_SENSOR_COEFF= ( 0.5, 0.02 )
%
% Time discretization (RUNGE-KUTTA_EXPLICIT, EULER_IMPLICIT, EULER_EXPLICIT)
TIME_DISCRE_FLOW= EULER_IMPLICIT

% -------------------- TURBULENT NUMERICAL METHOD DEFINITION ------------------%
%
% Convective numerical method (SCALAR_UPWIND)
CONV_NUM_METHOD_TURB= SCALAR_UPWIND
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the turbulence equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_TURB= NO
%
% Slope limiter (VENKATAKRISHNAN, MINMOD)
SLOPE_LIMITER_TURB= VENKATAKRISHNAN
%
% Time discretization (EULER_IMPLICIT)
TIME_DISCRE_TURB= EULER_IMPLICIT

% ----------------------- GEOMETRY EVALUATION PARAMETERS ----------------------%
%
% Marker(s) of the surface where geometrical based function will be evaluated
GEO_MARKER= ( WING )
%
% Description of the geometry to be analyzed (AIRFOIL, WING, FUSELAGE)
GEO_DESCRIPTION= WING
%
% Coordinate of the stations to be analyzed
GEO_LOCATION_STATIONS= (0.0, 0.2, 0.4, 0.6, 0.8)
%
% Geometrical bounds (Y coordinate) for the wing geometry analysis or
% fuselage evaluation (X coordinate)
GEO_BOUNDS= (0, 0.8)
%
% Plot loads and Cp distributions on each airfoil section
GEO_PLOT_STATIONS= YES 
%
% Number of section cuts to make when calculating wing geometry
GEO_NUMBER_STATIONS= 25
%
% Geometrical evaluation mode (FUNCTION, GRADIENT)
GEO_MODE= GRADIENT

% --------------------------- CONVERGENCE PARAMETERS --------------------------%
%
% Convergence criteria (CAUCHY, RESIDUAL)
CONV_FIELD= DRAG
%
CONV_CRITERIA= RESIDUAL
%
% Min value of the residual (log10 of the residual)
CONV_RESIDUAL_MINVAL= -16
%
% Start convergence criteria at iteration number
CONV_STARTITER= 10000
%
% Number of elements to apply the criteria
CONV_CAUCHY_ELEMS= 100
%
% Epsilon to control the series convergence
CONV_CAUCHY_EPS= 1E-16

% ------------------------- INPUT/OUTPUT INFORMATION --------------------------%
%
% Mesh input file
MESH_FILENAME= mesh_tutorial_ffd.su2
%
% Mesh input file format (SU2, CGNS, NETCDF_ASCII)
MESH_FORMAT= SU2
%
% Mesh output file
MESH_OUT_FILENAME= mesh_tutorial_ffd_deform.su2
%
% Restart flow input file
SOLUTION_FILENAME= solution_flow.dat
%
% Restart adjoint input file
SOLUTION_ADJ_FILENAME= solution_adj.dat
%
% Output file format (PARAVIEW, TECPLOT, STL)
TABULAR_FORMAT= TECPLOT
%
% Output file convergence history (w/o extension) 
CONV_FILENAME= history
%
% Output file restart flow
RESTART_FILENAME= restart_flow.dat
%
% Output file restart adjoint
RESTART_ADJ_FILENAME= restart_adj.dat
%
% Output file flow (w/o extension) variables
VOLUME_FILENAME= flow
%
% Output file adjoint (w/o extension) variables
VOLUME_ADJ_FILENAME= adjoint
%
% Output objective function gradient 
GRAD_OBJFUNC_FILENAME= of_grad.dat
%
% Output objective function hessian 
HESS_OBJFUNC_FILENAME= of_hess.dat
%
% Output file surface flow coefficient (w/o extension)
SURFACE_FILENAME= surface_flow
%
% Output file surface adjoint coefficient (w/o extension)
SURFACE_ADJ_FILENAME= surface_adjoint
%
% Writing solution file frequency
OUTPUT_WRT_FREQ= 1000
%
% Writing convergence history frequency
SCREEN_WRT_FREQ_INNER= 10
%
OUTPUT_FILES= (RESTART, PARAVIEW, SURFACE_PARAVIEW)
%
VOLUME_OUTPUT= (COORDINATES, SOLUTION, PRIMITIVE, SENSITIVITY )
%
SCREEN_OUTPUT= (INNER_ITER, RMS_DENSITY, RMS_ENERGY, DRAG, LIFT, RMS_ADJ_DENSITY, RMS_ADJ_ENERGY)
%
HISTORY_OUTPUT= (ITER, RMS_RES, AERO_COEFF, SENSITIVITY)

% -------------------- FREE-FORM DEFORMATION PARAMETERS -----------------------%
%
% Tolerance of the Free-Form Deformation point inversion
FFD_TOLERANCE= 1E-10
%
% Maximum number of iterations in the Free-Form Deformation point inversion
FFD_ITERATIONS= 500
%
% FFD box definition: 3D case (FFD_BoxTag, X1, Y1, Z1, X2, Y2, Z2, X3, Y3, Z3, X4, Y4, Z4,
%                              X5, Y5, Z5, X6, Y6, Z6, X7, Y7, Z7, X8, Y8, Z8)
%                     2D case (FFD_BoxTag, X1, Y1, 0.0, X2, Y2, 0.0, X3, Y3, 0.0, X4, Y4, 0.0,
%                              0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
FFD_DEFINITION= (WINGBOX, -0.0403, 0, -0.04836, 0.8463,0, -0.04836, 1.209, 1.2896, -0.04836, 0.6851, 1.2896, -0.04836, -0.0403, 0, 0.04836, 0.8463, 0, 0.04836, 1.209, 1.2896, 0.04836, 0.6851, 1.2896, 0.04836)
%
% FFD box degree: 3D case (x_degree, y_degree, z_degree)
%                 2D case (x_degree, y_degree, 0)
FFD_DEGREE= (10, 8, 1)
%
% Surface continuity at the intersection with the FFD (1ST_DERIVATIVE, 2ND_DERIVATIVE)
FFD_CONTINUITY= 2ND_DERIVATIVE

% ----------------------- DESIGN VARIABLE PARAMETERS --------------------------%
%
% Kind of deformation (FFD_SETTING, FFD_CONTROL_POINT_2D, FFD_CAMBER_2D, FFD_THICKNESS_2D,
%                      HICKS_HENNE, PARABOLIC,
%                      NACA_4DIGITS, DISPLACEMENT, ROTATION, FFD_CONTROL_POINT, 
%                      FFD_NACELLE, FFD_TWIST, FFD_ROTATION,
%                      FFD_CAMBER, FFD_THICKNESS, SURFACE_FILE)

%
% Marker of the surface in which we are going apply the shape deformation
DV_MARKER= ( WING )
%
% Parameters of the shape deformation
%       - HICKS_HENNE ( Lower Surface (0)/Upper Surface (1)/Only one Surface (2), x_Loc )
%       - NACA_4DIGITS ( 1st digit, 2nd digit, 3rd and 4th digit )
%       - PARABOLIC ( Center, Thickness )
%       - DISPLACEMENT ( x_Disp, y_Disp, z_Disp )
%       - ROTATION ( x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
%       - OBSTACLE ( Center, Bump size )
%       - FFD_CONTROL_POINT ( FFD_BoxTag ID, i_Ind, j_Ind, k_Ind, x_Disp, y_Disp, z_Disp )
%       - FFD_DIHEDRAL_ANGLE ( FFD_BoxTag ID, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
%       - FFD_TWIST_ANGLE ( FFD_BoxTag ID, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
%       - FFD_ROTATION ( FFD_BoxTag ID, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
%       - FFD_CAMBER ( FFD_BoxTag ID, i_Ind, j_Ind )
%       - FFD_THICKNESS ( FFD_BoxTag ID, i_Ind, j_Ind )
%       - FFD_VOLUME ( FFD_BoxTag ID, i_Ind, j_Ind )
DV_PARAM= ( WINGBOX, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 8.0, 1.0, 0.0, 0.0, 1.0) 
%
% New value of the shape deformation
DV_VALUE= 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0

% ------------------------ GRID DEFORMATION PARAMETERS ------------------------%
%
% Linear solver or smoother for implicit formulations (FGMRES, RESTARTED_FGMRES, BCGSTAB)
DEFORM_LINEAR_SOLVER= FGMRES
%
% Number of smoothing iterations for mesh deformation
DEFORM_LINEAR_SOLVER_ITER= 500
%
% Minimum residual criteria for the linear solver convergence of grid deformation
DEFORM_LINEAR_SOLVER_ERROR= 1E-14
%
% Print the residuals during mesh deformation to the console (YES, NO)
DEFORM_CONSOLE_OUTPUT= YES
%
% Type of element stiffness imposed for FEA mesh deformation (INVERSE_VOLUME, 
%                                          WALL_DISTANCE, CONSTANT_STIFFNESS)
DEFORM_STIFFNESS_TYPE= WALL_DISTANCE

% --------------------- OPTIMAL SHAPE DESIGN DEFINITION -----------------------%
%
% Optimization objective function with optional scaling factor
% ex= Objective * Scale
OPT_OBJECTIVE= DRAG

% Optimization constraint functions with scaling factors, separated by semicolons
% ex= (Objective = Value ) * Scale, use '>','<','='
OPT_CONSTRAINT= (LIFT = 0.2514); ( STATION1_THICKNESS > 0.077); (STATION2_THICKNESS > 0.072); (STATION3_THICKNESS > 0.066); (STATION4_THICKNESS > 0.060); (STATION5_THICKNESS > 0.054) 

% Maximum number of iterations
OPT_ITERATIONS= 100
%
% Upper bound for each design variable (bound in the python optimizer)
OPT_BOUND_UPPER= 0.1
%
% Lower bound for each design variable (bound in the python optimizer)
OPT_BOUND_LOWER= -0.1
%
OPT_GRADIENT_FACTOR = 0.001
%
OPT_HESSIAN_FACTOR = 0.001
%
% Modus for the handwritten SQP solver
SQP_MODE = SQP_CVXOPT
%
% Modus for the SQP linesearch
LINESEARCH_MODE = 1e-1
%
% List of design variables (Design variables are separated by semicolons)
DEFINITION_DV= ( 11, 1.0 | WING | WINGBOX, 0, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 8, 1, 0.0, 0.0, 1.0 )

DV_VALUE_NEW= 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
DV_VALUE_OLD= 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
